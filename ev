#!/bin/bash
# Smart tool for task testing in Competitive Programming.
#
# Copyright (C) 2014 Herman Zvonimir Došilović
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# specify your C compiler
GCC=gcc

# specify your C++ compiler
GPP=g++

# specify your Ruby interpreter
RUBY=ruby

# specify your Python interpreter
PYTHON=python

# colors settings
if [ "$EVC" == "true" ]; then
  NC="\033[0m" # no color
  R="\033[0;31m" # red
  G="\033[0;32m" # green
  Y="\033[0;33m" # yellow
  GY="\033[0;37m" # light gray
  C="\033[36m" # cyan
fi

if [[ ! $EVT =~ ^[1-9][0-9]*$ ]]; then
  EVT="1"
fi

# find last modified .c, .cpp, .py, .rb or .java file
source=$(ls -tr *.{c,cpp,rb,py,java} 2> /dev/null | tail -n -1)
# get file extension
extension=${source##*.}
# get file name
name=${source%%.*}

compile() {
  # compile source if c, cpp or java file
  if [ "$extension" == "c" ]; then
    errors=$($GCC "$source" -o "$name".out 2>&1> /dev/null)
  elif [ "$extension" == "cpp" ]; then
    errors=$($GPP "$source" -o "$name".out 2>&1> /dev/null)
  elif [ "$extension" == "java" ]; then
    errors=$(javac "$source" 2>&1> /dev/null)
  fi

  # if compile errors occurred then cannot continue
  if [ "$errors" != "" ]; then
    echo -e "${R}COMPILATION ERROR$NC"
    echo "$errors"
    exit
  fi

  # specify command and what file to execute
  if [ "$extension" == "c" ] || [ "$extension" == "cpp" ]; then
    command="./"
    execute="$name".out
  elif [ "$extension" == "java" ]; then
    command="java "
    execute=$name
  elif [ "$extension" == "rb" ]; then
    command="$RUBY "
    execute="$source"
  else
    command="$PYTHON "
    execute="$source"
  fi
}

# function removes blank lines and trailing spaces from given file
remove-blanks() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    sed -i "" 's/[[:space:]]*$//' "$1"
    sed -i "" '/^[[:space:]]*$/d' "$1"
  else
    sed -i 's/[[:space:]]*$//' "$1"
    sed -i '/^[[:space:]]*$/d' "$1"
  fi
}

run_tests() {
  allAccepted=true
  filter="^(.*\.|.{0})in(\..*|.{0})$"
  replace="s/^in\./out./;s/\.in\./.out./;s/\.in$/.out/"

  total_memory=$(cat /proc/meminfo | grep MemTotal | cut -d " " -f 9)

  cd "test/$name/"
  for fin in *; do
    if [ "$(echo $fin | grep -E "$filter")" == "" ]; then
      continue
    fi

    # from official input file make output file with same format
    fout="$(echo $fin | sed $replace )"

    remove-blanks "$fin"
    # skip empty input file
    if [ ! -s "$fin" ]; then
      continue
    fi

    echo "* $fin:"

    # remove blank lines from output file
    if [ -e "$fout" ]; then
      remove-blanks "$fout"
    fi

    compareResults=false

    # remove old user out if exists
    rm "$fout.user" 2> /dev/null

    # by default output is console stdout
    foutuser="/dev/stdout"

    # if output file exists and is not empty, then output is to .user file
    if [ -e "$fout" ] && [ -s "$fout" ]; then
      foutuser="$fout.user"
      compareResults=true
    fi

    # use user as stdin if '$' at beginning of .in file
    if [ "$(cat "$fin" | head -n 1 | cut -c 1)" == "$" ]; then
      fin="/dev/stdin"
    fi

    # use console stdout as output if '$' on beginning of output file
    if [ -e "$fout" ] && [ "$(cat "$fout" | head -n 1 | cut -c 1)" == "$" ]; then
      compareResults=false
      foutuser="/dev/stdout"
    elif [ -e "$fout" ] && [ "$(cat "$fout" | head -n 1 | cut -c 1)" == "!" ]; then
      compareResults=false
    fi

    # if reading from file
    if [ "$fin" != "/dev/stdin" ]; then
      # Link file descriptor #6 with stdin
      exec 6<&0
      # Replace stdin with file
      exec < "$fin"
    fi

    while read -r line; do
      echo $line
      if [ -z "$line" ]; then
        break
      fi
    done | $command"$execute" > "$foutuser" &

    # get pid of executed program
    pid=$!

    # wait ev input process to finish - ignoring input time
    while ps -p $(($pid - 1)) > /dev/null; do continue; done;

    # get memory usage
    memory=$(ps -p $pid -o %mem | sed 1d | sed 's/ //')
    if [[ $memory == "" ]]; then
      memory="0"
    fi

    if [ "$fin" != "/dev/stdin" ]; then
      # Restore stdin from file descriptor #6 and close file descriptor #6
      exec 0<&6 6<&-
    fi

    # measure time of running process
    tle=false
    start=$(date +%s%N)
    end=$(date +%s%N)
    diff=$(bc <<< "scale=6; ($end - $start)/1000000000" | sed 's/^\./0./')
    while ps -p $pid > /dev/null; do
      end=$(date +%s%N)
      diff=$(bc <<< "scale=6; ($end - $start)/1000000000" | sed 's/^\./0./')
      new_memory=$(ps -p $pid -o %mem | sed 1d | sed 's/ //')
      if [[ $new_memory != "" && $(bc <<< "$new_memory > $memory") == 1 ]]; then
        memory=$new_memory
      fi

      if [[ $(bc <<< "$diff > $EVT") == 1 ]]; then
        kill -SIGKILL $pid &> /dev/null
        wait $! &> /dev/null
        memory=$(bc <<< "scale=6; $total_memory*$memory/102400" | sed 's/^\./0./')
        echo -e "${Y}TIME LIMIT EXCEEDED$NC"
        echo -e "~${C}${diff}s$NC ~${C}${memory}MB$NC"
        compareResults=false
        allAccepted=false
        tle=true
        if [ "$foutuser" != "/dev/stdout" ]; then
          rm "$foutuser"
        fi
        break;
      fi
    done

    memory=$(bc <<< "scale=6; $total_memory*$memory/102400" | sed 's/^\./0./')
    # compare files if output is redirected to file
    if [ $compareResults == true ]; then
      remove-blanks "$foutuser"
      cmp -s "$fout" "$foutuser"
      if [ $? -eq 1 ]; then
        echo -e "${R}WRONG ANSWER$NC"
        echo -e "~${C}${diff}s$NC ~${C}${memory}MB$NC"
        echo -e "${GY}ev: check $foutuser for help$NC"
        allAccepted=false
      else
        echo -e "${G}ACCEPTED$NC"
        echo -e "~${C}${diff}s$NC ~${C}${memory}MB$NC"
        rm "$foutuser"
      fi
    elif [ "$foutuser" != "/dev/stdout" ] && [ $tle == false ]; then
      echo -e "${GY}check $foutuser$NC"
    fi

    echo

  done
}

fast_run() {
  # if no file found then cannot continue
  if [ "$source" == "" ]; then
    echo "ev: no file for execution"
    exit
  fi

  # if there is specified "compile and run" comment, then use it
  custom="$(cat "$source" | grep -E -m 1 "compile and run: " | cut -d ":" -f 2 | sed "s/\*\///;s/^ *//")"
  if [[ $custom != "" ]]; then
    echo " - $source -"
    echo $custom | bash
  else
    compile
    echo " - $source -"
    $command"$execute"
  fi
  exit
}

check_for_tests() {
  # if there is no 'test' directory
  if [ ! -d "test/$name/" ]; then
    echo "* created test/$name/"
    mkdir -p "test/$name"
  fi

  # check if tests exists
  tests=$(ls "test/$name/" 2> /dev/null)
  if [ "$tests" == "" ]; then
    # create 2 input/output files
    for case in {1..2}; do
      touch "test/$name/$name.$case.in"
      echo "* created test/$name/$name.$case.in"
      touch "test/$name/$name.$case.out"
      echo "* created test/$name/$name.$case.out"
    done
    exit
  fi
}

project_run() {
  source="$1"
  if [[ ! -e $source ]]; then
    echo "ev: no such file $source"
    exit
  fi

  root_dir=${source%%/*}
  name=${source%%.*}; name=${name##*/}

  errors=$(javac "$root_dir"/*.java 2>&1> /dev/null)
  if [[ $errors != "" ]]; then
    echo -e "${R}COMPILATION ERROR$NC"
    echo "$errors"
    exit
  fi

  check_for_tests

  cp $root_dir/*.class "test/$name/"

  command="java "
  execute="$name"

  echo " - $source -"
  echo "Time limit: ${EVT}s"
  echo

  run_tests

  cd ../../

  rm $root_dir/*.class

  rm test/"$name"/*.class

  exit
}

if [[ $1 == "-r" ]]; then
  fast_run
elif [[ $1 != "" ]]; then
  project_run $1
fi

# if no file found then cannot continue
if [ "$source" == "" ]; then
  echo "ev: no file for execution"
  exit
fi

compile

if [[ "$extension" != "java" ]]; then
  execute="../../""$execute"
fi

echo " - $source -"
echo "Time limit: ${EVT}s"
echo

check_for_tests

if [ "$extension" == "java" ]; then
  cp "$name.class" "test/$name/"
fi

run_tests

if [ "$extension" == "java" ]; then
  rm "$name.class"
fi

cd ../../

# if user has everything correct delete created object file
if [ $allAccepted == true ]; then
  if [ "$extension" == "c" ] || [ "$extension" == "cpp" ]; then
    rm "$name".out 2> /dev/null
  elif [ "$extension" == "java" ]; then
    rm "$name.class"
  fi
fi
